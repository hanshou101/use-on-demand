class GenTypedocUtil {

	/**
	 *
	 */
	private readonly typedocCfg = {

		// TIP——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
		// TIP——————————————————————————————————————————以下为【输入选项】——————————————————————————————————————————————————————————————
		// TIP——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

		/**
		 * 转换项目的模式：
		 * 				WARN 恰恰相反？很奇怪吧
		 * 				file 			目录形式，为【基于模块层次、namespace】的树状。
		 * 				modules 	目录形式，为【文件路径】列表。（对于生成内部使用文档的项目最有用）
		 */
		'mode'                : 'file',
		// 'mode'                : 'modules',
		/**
		 * 需要生成文档的目录
		 */
		'inputFiles'          : [
			// './ts-docs',
			'./sources',
			// './sources/**/*.ts',
		],
		/**
		 * 排除 某些不需要生成文档 的文件
		 */
		'exclude'             : [
			// 注意，这里是【星加】，不是【星星】
			'**/*+(index|.spec|.e2e).ts',
			// 不为 【.d.ts】文件 生成专门文档
			'**/**.d.ts',
			'sources/tradingview/**/*.*',
		],
		/**
		 * 打开【.d.ts】声明文件的解析。（同时应使用【excludeExternals】！）
		 */
		'includeDeclarations' : true,
		/**
		 * 避免为【外部的TypeScript文件】创建文档。（配合【includeDeclarations】使用！）
		 */
		'excludeExternals'    : true,
		/**
		 * 指定【外部的TypeScript文件】的格式。
		 */
		'externalPattern'     : [
			'(lib|external)/**/*.ts',
			'lib-cp/**/*.ts',
			'examples/**/*.ts',
			'packages/**/*.ts',
		],
		/**
		 * 全局TS文件的主入口。（可能并没有这个）
		 * 				1.WARN 此处，必须为【内外双层引号】。
		 */
		// 'entryPoint'          : '"index"',
		/**
		 * 即使项目有TypeScript错误，也要生成文档。
		 * 				1.如果仅在成功构建后生成文档，则启用此选项将提供性能优势。
		 * 				2.WARN 我感觉，我需要生成一份【完整文档】，来看一下，是什么样子的。所以可以忽略报错。
		 */
		'ignoreCompilerErrors': true,
		// 'ignoreCompilerErrors': false,						// 此处，不再允许错误（更加严格）
		//
		//
		//
		//
		//
		//
		//
		//
		// 'excludeNotExported'  : '',			// 从生成的文档中删除本地符号。默认为false。
		// 'excludePrivate'      : '',			// 从生成的文档中删除私有类成员。默认为false。
		// 'excludeProtected'    : '',			// 从生成的文档中删除受保护的类成员。默认为false。
		// 'stripInternal'       : '',			// 删除@internal以TypeScript识别的注释注释的成员。
		// 'media'               : '',			// 指定将复制到输出文件的媒体目录。可以media://file.jpg在doc注释中将媒体链接到。
		// 'includes'            : '',			// 指定包含文件的目录，该文件可以通过[[include:file.md]]doc注释注入到生成的文档中。


		// TIP——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
		// TIP——————————————————————————————————————————以下为【输出选项】——————————————————————————————————————————————————————————————
		// TIP——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


		/**
		 * 输出目录
		 * 				1.WARN 此处有一个小技巧，将【ts-docs】文件，放到【vuepress】的子目录下。
		 */
		// 'out': 'ts-docs',
		'out': 'lib-docs-dist/ts-docs',
		//
		//
		//
		//
		//
		//
		//
		//
		// 'json'              : '',												// 指定输出包含所有反射数据的JSON文件的位置。
		// 'theme'             : '',												// 指定应使用的主题的路径。
		// 'name'              : '',												// 设置将在模板标题中使用的项目的名称。
		// 'includeVersion'    : '',												// 将软件包版本添加到项目名称中。
		// 'disableSources'    : '',												// 禁用描述反射创建位置的文本中的定义。
		// 'excludeTags'       : '',												// 指定在解析时应从文档注释中删除的标签。如果您的项目使用apiDoc来记录RESTful Web API很有用。
		// 'readme'            : '',												// 应在索引页面上显示的自述文件的路径。不传递任何内容以禁用索引页面并在globals页面上启动文档。
		// 'categorizeByGroup' : '',												// 该标志按组对反射进行分类（在属性，方法等内部）。要允许将同一类别的方法和属性组合在一起，请将此标志设置为false。默认为true。
		// 'defaultCategory'   : '',												// 设置仅对页面的某些元素进行分类时使用的默认类别的名称。默认为“Other”
		// 'categoryOrder'     : [],												// 允许覆盖订单类别的“数组”选项在其中显示。一串*指示应该显示列表中不在的类别的位置。默认情况下，类别按字母顺序显示。如果找到未知类别，则默认情况下将在末尾列出它们。
		// 'gitRevision'       : '',												// 使用指定的修订patch revision 或分支而不是【最近上一个修订】来链接到GitHub源文件。
		// 'gitRemote'         : '',												// 使用指定的git remote代替origin链接到GitHub源文件。您可以git remote用来查看有效遥控器的列表。如果您要更新分叉包的文档，则可能要通过--gitRemote upstream。
		// 'gaID'              : '',												// 设置Google Analytics（分析）跟踪ID并激活跟踪代码。
		// 'gaSite'            : '',												// 设置Google Analytics（分析）的网站名称。默认为auto。
		// 'hideGenerator'     : '',												// 不要在页面末尾打印TypeDoc链接。默认为false。
		// 'toc'               : '',												// 覆盖“全局”导航侧边栏，仅包括“ toc”白名单中提供的类型。在大型项目中，边栏中的Globals数量可能非常庞大，这很有用。
		// 'disableOutputCheck': '',												// 禁用检查和清除由指定的输出目录--out。


		// TIP——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
		// TIP——————————————————————————————————————————以下为【其它选项】——————————————————————————————————————————————————————————————
		// TIP——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
		// 'plugin': '',																				// 指定应加载的插件。默认情况下，typedocplugin将加载所有带有其关键字的已安装npm软件包。
		// 'logger': '',																				// 指定要向其写入输出的记录器。以编程方式使用TypeDoc时，可以指定一个函数，该函数将与日志消息一起调用。默认情况下，登录到控制台。none可以传递以禁用日志记录。

	};

	public gen() {
		console.log('开始生成', 'typedoc.json文件');
		require('fs').writeFileSync('typedoc.json', JSON.stringify(this.typedocCfg, null, 2));
	}
}

new GenTypedocUtil().gen();
